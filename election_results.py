# -*- coding: utf-8 -*-
"""Election_Results.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yRcdcyyfVNKHYTBm41QCSjM-b2jqf1GE
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive/Election-Results

# required modules
import requests
from bs4 import BeautifulSoup
import pandas as pd

url = "https://results.eci.gov.in/PcResultGenJune2024/index.htm"
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html')

tables = soup.find_all('table')
#tables  ---------- it returns the main table with the tags

for t in tables:
    headings = t.find_all('th')
headings

results = {}
soup = BeautifulSoup(response.text, 'html.parser')
table = soup.find('table', {'class': 'table'})
headers = [header.text.strip() for header in table.find_all('th')]
rows = table.find_all('tr') # to find each row in the table

for row in rows[1:-1]:  # removing the header and footer rows
    cols = row.find_all('td')
    party_data = [col.text.strip() for col in cols]
    results[party_data[0]] = party_data[1:]

#  ------------------ checking to see if it returns the results without the html tags
for party, data in results.items():
    print(f"{party}: Won - {data[0]}, Leading - {data[1]}, Total - {data[2]}")

# IT WORKS!! Now to save this to a dataframe and export it as .xlsx using pandas

data = []
for party, values in results.items():
    data.append([party] + values)

df = pd.DataFrame(data, columns=['Party', 'Won', 'Leading', 'Total'])

df.to_excel('election_results.xlsx', index=False)

print("Data saved to election_results.xlsx")

excel_writer = pd.ExcelWriter('state_er.xlsx', engine='openpyxl')

for i in range(1, 30):
    state_code = f"S{i:02}"
    url = f"https://results.eci.gov.in/PcResultGenJune2024/partywiseresult-{state_code}.htm"

    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    header_tag = soup.find('h2')
    if not header_tag:
        print(f"Header not found for state: {state_code}")
        continue

    state_name = header_tag.text.strip()

    table = soup.find('table', {'class': 'table'})
    if not table:
        print(f"Table not found for state: {state_code}")
        continue

    headers = [header.text.strip() for header in table.find_all('th')[:4]]
    rows = table.find_all('tr')

    results = []
    for row in rows[1:-1]:
        cols = row.find_all('td')
        party_data = [col.text.strip() for col in cols]
        results.append(party_data)

    df = pd.DataFrame(results, columns=headers)
    sheet_name = state_name.split('(')[0].strip()[:31]
    df.to_excel(excel_writer, sheet_name=sheet_name, index=False)

    print(f"Data for {state_name} has been exported to state_er.xlsx")

excel_writer.book.save('state_er.xlsx')
excel_writer.close()

print("All data has been exported.")

excel_writer = pd.ExcelWriter('union_er.xlsx', engine='openpyxl')

for i in range(1, 10):
    union_code = f"U{i:02}"
    url = f"https://results.eci.gov.in/PcResultGenJune2024/partywiseresult-{union_code}.htm"

    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    header_tag = soup.find('h2')
    if not header_tag:
        print(f"Header not found for union territory: {union_code}")
        continue

    ut_name = header_tag.text.strip()

    table = soup.find('table', {'class': 'table'})
    if not table:
        print(f"Table not found for union territory: {union_code}")
        continue

    headers = [header.text.strip() for header in table.find_all('th')[:4]]
    rows = table.find_all('tr')

    results = []
    for row in rows[1:-1]:
        cols = row.find_all('td')
        party_data = [col.text.strip() for col in cols]
        results.append(party_data)

    df = pd.DataFrame(results, columns=headers)
    sheet_name = ut_name.split('(')[0].strip()[:31]
    df.to_excel(excel_writer, sheet_name=sheet_name, index=False)

    print(f"Data for {ut_name} has been exported to union_er.xlsx")

excel_writer.book.save('union_er.xlsx')
excel_writer.close()

print("All data has been exported.")